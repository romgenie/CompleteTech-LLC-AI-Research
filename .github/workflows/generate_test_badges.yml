name: Generate Test Status Badges

on:
  workflow_run:
    workflows: ["Knowledge Extraction Tests"]
    types:
      - completed

jobs:
  generate_badges:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download test results
        uses: actions/github-script@v6
        with:
          script: |
            try {
              console.log("Workflow run ID:", "${{ github.event.workflow_run.id }}");
              
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: "${{ github.event.workflow_run.id }}"
              });
              
              console.log("Found artifacts:", artifacts.data.artifacts.length);
              
              const testResults = artifacts.data.artifacts.filter(
                artifact => artifact.name.startsWith('test-results-')
              );
              
              console.log("Found test result artifacts:", testResults.length);
              
              if (testResults.length === 0) {
                console.log("No test result artifacts found. Skipping download step.");
                return;
              }
              
              for (const artifact of testResults) {
                console.log("Downloading artifact:", artifact.name);
                
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip'
                });
                
                const fs = require('fs');
                fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
                
                console.log("Extracting artifact:", artifact.name);
                await exec.exec(`unzip -o ${artifact.name}.zip -d ${artifact.name}`);
              }
            } catch (error) {
              console.error("Error downloading artifacts:", error);
              console.log("Continuing with badge generation...");
            }
            
      - name: Generate badges
        run: |
          mkdir -p badges
          
          # Check if test results directories exist
          if ls test-results-* 1> /dev/null 2>&1; then
            echo "Found test result directories"
            
            # Parse test results to determine status
            declare -A test_statuses
            
            for dir in test-results-*; do
              if [ -d "$dir" ]; then
                version=$(echo $dir | cut -d'-' -f3)
                test_type=$(echo $dir | cut -d'-' -f4)
                
                if [ -f "$dir/test-report.html" ]; then
                  if grep -q "0 failed" "$dir/test-report.html"; then
                    test_statuses["${test_type}-${version}"]="passing"
                  else
                    test_statuses["${test_type}-${version}"]="failing"
                  fi
                else
                  test_statuses["${test_type}-${version}"]="unknown"
                fi
              fi
            done
            
            # Generate badges
            if [ ${#test_statuses[@]} -eq 0 ]; then
              echo "No test statuses found, creating placeholder badges"
              # Create placeholder badges for common test types
              for test_type in unit integration e2e property edge; do
                for version in 3.9 3.10; do
                  curl -o "badges/${test_type}-${version}.svg" "https://img.shields.io/badge/${test_type}%20tests-unknown-lightgrey"
                done
              done
            else
              echo "Creating badges based on test results"
              for key in "${!test_statuses[@]}"; do
                test_type=$(echo $key | cut -d'-' -f1)
                version=$(echo $key | cut -d'-' -f2)
                status=${test_statuses[$key]}
                
                color="red"
                if [ "$status" == "passing" ]; then
                  color="brightgreen"
                elif [ "$status" == "unknown" ]; then
                  color="lightgrey"
                fi
                
                curl -o "badges/${test_type}-${version}.svg" "https://img.shields.io/badge/${test_type}%20tests-${status}-${color}"
              done
            fi
          else
            echo "No test result directories found, creating placeholder badges"
            # Create placeholder badges for common test types
            for test_type in unit integration e2e property edge; do
              for version in 3.9 3.10; do
                curl -o "badges/${test_type}-${version}.svg" "https://img.shields.io/badge/${test_type}%20tests-unknown-lightgrey"
              done
            done
          fi
      
      - name: Update README with badges
        run: |
          # Ensure the README directory exists
          mkdir -p tests/research_orchestrator/knowledge_extraction
          
          # Create README if it doesn't exist
          if [ ! -f "tests/research_orchestrator/knowledge_extraction/README.md" ]; then
            echo "# Knowledge Extraction Tests" > tests/research_orchestrator/knowledge_extraction/README.md
          fi
          
          # Create badge section in README if it doesn't exist
          if ! grep -q "## Test Status" tests/research_orchestrator/knowledge_extraction/README.md; then
            cat << EOF >> tests/research_orchestrator/knowledge_extraction/README.md
          
          ## Test Status
          
          | Test Type | Python 3.9 | Python 3.10 |
          |-----------|------------|-------------|
          | Unit      | ![Unit Tests 3.9](https://github.com/${{ github.repository }}/blob/badges/badges/unit-3.9.svg) | ![Unit Tests 3.10](https://github.com/${{ github.repository }}/blob/badges/badges/unit-3.10.svg) |
          | Integration | ![Integration Tests 3.9](https://github.com/${{ github.repository }}/blob/badges/badges/integration-3.9.svg) | ![Integration Tests 3.10](https://github.com/${{ github.repository }}/blob/badges/badges/integration-3.10.svg) |
          | End-to-End | ![E2E Tests 3.9](https://github.com/${{ github.repository }}/blob/badges/badges/e2e-3.9.svg) | ![E2E Tests 3.10](https://github.com/${{ github.repository }}/blob/badges/badges/e2e-3.10.svg) |
          | Property   | ![Property Tests 3.9](https://github.com/${{ github.repository }}/blob/badges/badges/property-3.9.svg) | ![Property Tests 3.10](https://github.com/${{ github.repository }}/blob/badges/badges/property-3.10.svg) |
          | Edge Case  | ![Edge Case Tests 3.9](https://github.com/${{ github.repository }}/blob/badges/badges/edge-3.9.svg) | ![Edge Case Tests 3.10](https://github.com/${{ github.repository }}/blob/badges/badges/edge-3.10.svg) |
          | Coverage   | ![Coverage](https://codecov.io/gh/${{ github.repository }}/branch/main/graph/badge.svg?token=${{ secrets.CODECOV_TOKEN }}&flag=knowledge_extraction) |
          
          EOF
          fi
      
      - name: Commit badges
        run: |
          mkdir -p .github/badges
          # Make sure badges directory exists and is not empty before moving files
          if [ -d "badges" ]; then
            if [ "$(ls -A badges 2>/dev/null)" ]; then
              mv badges/* .github/badges/
            else
              echo "No badge files found to move"
              # Create a placeholder badge if none exist
              curl -o ".github/badges/placeholder.svg" "https://img.shields.io/badge/tests-unknown-lightgrey"
            fi
          else
            echo "Badges directory does not exist"
            # Create a placeholder badge if directory doesn't exist
            curl -o ".github/badges/placeholder.svg" "https://img.shields.io/badge/tests-unknown-lightgrey"
          fi
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .github/badges
          git add tests/research_orchestrator/knowledge_extraction/README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update test status badges"
            git push
          fi